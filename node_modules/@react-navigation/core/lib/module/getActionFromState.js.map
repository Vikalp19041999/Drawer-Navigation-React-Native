{"version":3,"sources":["getActionFromState.tsx"],"names":["getActionFromState","state","payload","routes","length","route","name","params","current","screen","undefined","type"],"mappings":";;;;;;AAiBA,eAAe,SAASA,kBAAT,CACbC,KADa,EAEL;AACR,MAAIC,OAAJ;;AAEA,MAAID,KAAK,CAACE,MAAN,CAAaC,MAAb,KAAwB,CAA5B,EAA+B;AAC7B;AACA;AACA,QAAIC,KAAK,GAAGJ,KAAK,CAACE,MAAN,CAAa,CAAb,CAAZ;AAEAD,IAAAA,OAAO,GAAG;AACRI,MAAAA,IAAI,EAAED,KAAK,CAACC,IADJ;AAERC,MAAAA,MAAM,oBAAOF,KAAK,CAACE,MAAb;AAFE,KAAV;AAKA,QAAIC,OAAO,GAAGP,KAAK,CAACE,MAAN,CAAa,CAAb,EAAgBF,KAA9B;AACA,QAAIM,MAAM,GAAGL,OAAO,CAACK,MAArB;;AAEA,WAAOC,OAAP,EAAgB;AACd,UAAIA,OAAO,CAACL,MAAR,CAAeC,MAAf,KAA0B,CAA9B,EAAiC;AAC/BC,QAAAA,KAAK,GAAGG,OAAO,CAACL,MAAR,CAAe,CAAf,CAAR;AACAI,QAAAA,MAAM,CAACE,MAAP,GAAgBJ,KAAK,CAACC,IAAtB;;AAEA,YAAID,KAAK,CAACJ,KAAV,EAAiB;AACfM,UAAAA,MAAM,CAACA,MAAP,qBAAqBF,KAAK,CAACE,MAA3B;AACAA,UAAAA,MAAM,GAAGA,MAAM,CAACA,MAAhB;AACD,SAHD,MAGO;AACLA,UAAAA,MAAM,CAACA,MAAP,GAAgBF,KAAK,CAACE,MAAtB;AACD;;AAEDC,QAAAA,OAAO,GAAGH,KAAK,CAACJ,KAAhB;AACD,OAZD,MAYO;AACLC,QAAAA,OAAO,GAAGQ,SAAV;AACA;AACD;AACF;AACF;;AAED,MAAIR,OAAJ,EAAa;AACX,WAAO;AACLS,MAAAA,IAAI,EAAE,UADD;AAELT,MAAAA;AAFK,KAAP;AAID;;AAED,SAAO;AACLS,IAAAA,IAAI,EAAE,YADD;AAELT,IAAAA,OAAO,EAAED;AAFJ,GAAP;AAID","sourcesContent":["import { PartialState, NavigationState } from '@react-navigation/routers';\n\ntype NavigateParams = {\n  screen?: string;\n  params?: NavigateParams;\n};\n\ntype Action =\n  | {\n      type: 'NAVIGATE';\n      payload: { name: string; params: NavigateParams };\n    }\n  | {\n      type: 'RESET_ROOT';\n      payload: PartialState<NavigationState>;\n    };\n\nexport default function getActionFromState(\n  state: PartialState<NavigationState>\n): Action {\n  let payload: { name: string; params: NavigateParams } | undefined;\n\n  if (state.routes.length === 1) {\n    // Try to construct payload for a `NAVIGATE` action from the state\n    // This lets us preserve the navigation state and not lose it\n    let route = state.routes[0];\n\n    payload = {\n      name: route.name,\n      params: { ...route.params },\n    };\n\n    let current = state.routes[0].state;\n    let params = payload.params;\n\n    while (current) {\n      if (current.routes.length === 1) {\n        route = current.routes[0];\n        params.screen = route.name;\n\n        if (route.state) {\n          params.params = { ...route.params };\n          params = params.params;\n        } else {\n          params.params = route.params;\n        }\n\n        current = route.state;\n      } else {\n        payload = undefined;\n        break;\n      }\n    }\n  }\n\n  if (payload) {\n    return {\n      type: 'NAVIGATE',\n      payload,\n    };\n  }\n\n  return {\n    type: 'RESET_ROOT',\n    payload: state,\n  };\n}\n"]}